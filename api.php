<?php
require("simple_html_dom.php");
class schoolBrains {
    var $authToken;
    var $loggedIn = false;
    var $base = "https://community.schoolbrains.com/haverhill_community/";
    var $error = array();
    var $id;
    var $name;
    function __construct($username, $password) {
        $ch = curl_init();
        
        curl_setopt($ch, CURLOPT_URL, $this->base . "Account/login");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
                        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query(
                            array(
                                'UserName' => $username,
                                'Password' => $password
                            )
                        ));
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_ENCODING, 'gzip, deflate');
        
        $headers = array();
        $headers[] = "Origin: https://community.schoolbrains.com";
        $headers[] = "Accept-Encoding: gzip, deflate";
        $headers[] = "Accept-Language: en-US,en;q=0.8";
        $headers[] = "Upgrade-Insecure-Requests: 1";
        $headers[] = "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.82 Safari/537.36";
        $headers[] = "Content-Type: application/x-www-form-urlencoded";
        $headers[] = "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8";
        $headers[] = "Cache-Control: max-age=0";
        $headers[] = "Referer: " . $this->base . "Account/login";
        $headers[] = "Connection: keep-alive";
        $headers[] = "Dnt: 1";
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        curl_setopt($ch, CURLOPT_HEADER, 1);
        
        $result = curl_exec($ch);
        $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);
        $header = substr($result, 0, $header_size);
        $header = explode("\n", $header);
        //var_dump($header);
        $cookie = $header[7];
        if (curl_getinfo($ch, CURLINFO_HTTP_CODE) === 302) {
                            $auth = explode("Set-Cookie: ", $cookie);
                            $auth = explode(";", $auth[1]);
                            $this->authToken = $auth[0];
                            $_COOKIE['authToken'] == $auth[0];
                            $this->loggedIn = true;
                        } else {
                            array_push($this->error, "Wrong username or password");
                        }
        
        curl_close ($ch);
        $ch = curl_init();
        
        curl_setopt($ch, CURLOPT_URL, $this->base . "CMS");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "GET");
        
        curl_setopt($ch, CURLOPT_ENCODING, 'gzip, deflate');
        
        $headers = array();
        $headers[] = "Dnt: 1";
        $headers[] = "Accept-Encoding: gzip, deflate, sdch";
        $headers[] = "Accept-Language: en-US,en;q=0.8";
        $headers[] = "Upgrade-Insecure-Requests: 1";
        $headers[] = "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.82 Safari/537.36";
        $headers[] = "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8";
        $headers[] = "Referer: " . $this->base . "Account/login";
        $headers[] = "Cookie: " . $this->authToken;
        $headers[] = "Connection: keep-alive";
        $headers[] = "Cache-Control: max-age=0";
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        
        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        curl_close ($ch);
        if (!isset($this->id)) {
            $this->id();
        }
        if (!isset($this->name)) {
            $this->name = $this->getName();
        }
    }
    function endpoint($endpoint, $token, $type="POST", $data=null) {
// Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
            $ch = curl_init();
            
            curl_setopt($ch, CURLOPT_URL, $this->base  . $endpoint);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $type);
            if (!is_null($data)) {
                echo $data;
                curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
            }
            curl_setopt($ch, CURLOPT_ENCODING, 'gzip, deflate');
            
            $headers = array();
            $headers[] = "Dnt: 1";
            $headers[] = "Accept-Encoding: gzip, deflate";
            $headers[] = "Accept-Language: en-US,en;q=0.8";
            $headers[] = "Upgrade-Insecure-Requests: 1";
            $headers[] = "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.82 Safari/537.36";
            $headers[] = "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8";
            $headers[] = "Cache-Control: max-age=0";
            $headers[] = "Cookie: " . $this->authToken;
            $headers[] = "Connection: keep-alive";
            $headers[0] = "Content-Length: " . strlen($data);
            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
            
            $result = curl_exec($ch);
            if (curl_errno($ch)) {
                echo 'Error:' . curl_error($ch);
            }
            curl_close ($ch);
            return $result;
    }
    function classes() {
        $classes = array();
        $result = $this->endpoint("StudentClasses2/Index", $this->authToken, "GET");
        //var_dump($result);
        $html = str_get_html($result);
        $table = $html->find('.table', 0);
        foreach($table->find('tr') as $element){
            $course = $element->find('td', 0)->plaintext;
            $teacher = $element->find('td', 1)->plaintext;
            $course = trim($course);
            $teacher = trim($teacher);
            //format course
            $course = trim(substr($course, 9));
            //echo $course . " " . $teacher . "\n";
            array_push($classes, array(
                    'course' => $course,
                    "teacher" => $teacher
                )
            );

        }
    unset($classes[0]);
    return $classes;
    }
    function grades() {
        $grades = array();
        $result = $this->endpoint("StudentCurrentGrades/Index", $this->authToken, "GET");
        $html = str_get_html($result);
        $courses = array();
        foreach ($html->find("h3") as $e) {
            $course = $e->plaintext;
            $course = substr($course, 19);
            array_push($courses, $course);
        }
        $grades_details = array();
        $x = 0;


        foreach($html->find('.table') as $table) {

            foreach($table->find('tr') as $element){
                $key = $element->find('td', 0)->plaintext;
                $grade = $element->find('td', 1)->plaintext;
                $key = trim($key);
                $grade = trim($grade);
                $course = $courses[$x];
                $newkey = sprintf('%s',$course);
                //$grades["'$newkey'"] = array();
                $oldkey = sprintf('%s',$key);
               //$grades["'$newkey'"] = array();
                $grades["$newkey"]["$oldkey"] = $grade;
            

            }

                        $x++;    

        }
    $fix = $grades;
    return $fix;
    
    }
    function schedule($term) {
        
        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $ch = curl_init();
        
        curl_setopt($ch, CURLOPT_URL, $this->base . "Schedule/ScheduleData/" . $this->id . "?TermSelectedID=T" . $term);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, "JSON{\"action\":\"Init\",\"type\":\"CallBack\",\"header\":{\"v\":\"1815\",\"control\":\"dpc\",\"id\":\"dpc\",\"clientState\":{},\"columns\":[],\"days\":1,\"startDate\":\"2017-01-23T00:00:00\",\"cellDuration\":30,\"cssOnly\":true,\"cssClassPrefix\":\"calendar_default\",\"heightSpec\":\"BusinessHours\",\"businessBeginsHour\":9,\"businessEndsHour\":18,\"viewType\":\"Resources\",\"dayBeginsHour\":0,\"dayEndsHour\":24,\"headerLevels\":1,\"backColor\":\"#ffffff\",\"nonBusinessBackColor\":\"#FFF4BC\",\"eventHeaderVisible\":true,\"timeFormat\":\"Clock12Hours\",\"timeHeaderCellDuration\":60,\"locale\":\"en-us\",\"showAllDayEvents\":false,\"hourNameBackColor\":\"#F3F3F9\",\"hourFontFamily\":\"Tahoma, Arial, Helvetica, sans-serif\",\"hourFontSize\":\"16pt\",\"hourFontColor\":\"#42658C\",\"selected\":[]}}");
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_ENCODING, 'gzip, deflate');
        
        $headers = array();
        $headers[] = "Origin: https://community.schoolbrains.com";
        $headers[] = "Accept-Encoding: gzip, deflate";
        $headers[] = "Accept-Language: en-US,en;q=0.8";
        $headers[] = "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.82 Safari/537.36";
        $headers[] = "Content-Type: application/x-www-form-urlencoded";
        $headers[] = "Accept: */*";
        $headers[] = "Referer: " . $this->base . "Schedule/IndexStudent?studentid=" . $this->id;
        $headers[] = "Cookie: " . $this->authToken;
        $headers[] = "Connection: keep-alive";
        $headers[] = "Dnt: 1";
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        
        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        curl_close ($ch);
        $result = json_decode($result, 1);
        $classes = array_slice($result['Events'], 0, 10);
        //var_dump($classes);
        $reformat = array();
        foreach ($classes as $class) {
            $text = explode(" - ", $class['text']);
            $push['teacher'] = $text[1];
            $push['course'] = $text[0];
            $data = explode("<br/>", $class['bubbleHtml']);
            $push['room'] = explode("Room: ", $data[4]);
            $push['room'] = $push['room'][1];
            $push['start'] = substr($data[1], 7, strlen($data[1]));
            $push['end'] = substr($data[2], 5, strlen($data[2]));

            //var_dump( $push['room']);
            //echo "\n\n";

            array_push($reformat, $push);
        }
        return $reformat;
        
    }
    function attendance() {
        $push = array();
        $result = $this->endpoint("StudentAttendance2/Index", $this->authToken);
        $html = str_get_html($result);
        $table = $html->find('.table', 0);
        foreach($table->find('tr') as $element){
            if (!empty($element->find('td', 1)->plaintext)) {
                $push[strtolower($element->find('td', 1)->plaintext)] =  (int) $element->find('td', 2)->plaintext;
            }
        }
        //unset($push[0]);
       return $push;
    }
    function id() {
        $return = $this->endpoint("", $this->authToken, "GET");
        $html = str_get_html($return);
        $a = $html->find('a');
        $link = "";
        foreach ($a as $e) {
            if ($e->plaintext == "Schedule") {
                $link = $e->href;
            }
        }
        if ($link !== "") {
            $id = explode("=", $link);
            $id = $id[1];
        } else { echo "error"; }
        $this->id = $id;
        return $id;
    }
    function getName() {
        $return = $this->endpoint("", $this->authToken, "GET");
        $html = str_get_html($return);
        $a = $html->find('a');
        $link = "";
        foreach ($a as $e) {
            
            if (substr($e->plaintext, 0, 7) == "Welcome") {
                $name = substr($e->plaintext,8, strlen($e->plaintext));
            }
        }
        return $name;
    }
    function letterToPercent($letter){
        switch($letter) {
            case "A+":
                return 98;
                break;
            case "A":
                return 95;
                break;
            case "A-":
                return 93;
                break;        
            case "B+":
                return 88;
                break;
            case "B":
                return 85;
                break;
            case "B-":
                return 83;
                break;        
            case "C+":
                return 78;
                break;
            case "C":
                return 75;
                break;
            case "C-":
                return 73;
                break;        
            case "D+":
                return 68;
                break;
            case "D":
                return 63;
                break;
            case "D-":
                return 60;
                break;
            case "F":
                return 0;
                break;
        }
    }
}
